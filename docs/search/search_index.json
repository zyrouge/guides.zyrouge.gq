{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"First page not yet done guys","title":"Welcome!"},{"location":"guides/discordjs/coding/","text":"Creating Main File Create a file named index.js in the main directory. I recommend using a IDE like Visual Studio Code or others like Atom, IDEA for easy programming. Creating Client in the Main File 1 2 const Discord = require ( \"discord.js\" ); const client = Discord . Client (); Login in the bot Now we have created the bot but its not yet online. Lets make it login using the Token. 1 2 3 4 const Discord = require ( \"discord.js\" ); const client = Discord . Client (); client . login ( 'PUTYOURTOKENHERE' ); Danger Never revealed your Token to anyone! Running the Code Enter this in CMD to run the project. 1 $ node index.js Info Now the Bot is Online! YAY","title":"Coding Discord Bot using discord.js"},{"location":"guides/discordjs/coding/#creating-main-file","text":"Create a file named index.js in the main directory. I recommend using a IDE like Visual Studio Code or others like Atom, IDEA for easy programming.","title":"Creating Main File"},{"location":"guides/discordjs/coding/#creating-client-in-the-main-file","text":"1 2 const Discord = require ( \"discord.js\" ); const client = Discord . Client ();","title":"Creating Client in the Main File"},{"location":"guides/discordjs/coding/#login-in-the-bot","text":"Now we have created the bot but its not yet online. Lets make it login using the Token. 1 2 3 4 const Discord = require ( \"discord.js\" ); const client = Discord . Client (); client . login ( 'PUTYOURTOKENHERE' ); Danger Never revealed your Token to anyone!","title":"Login in the bot"},{"location":"guides/discordjs/coding/#running-the-code","text":"Enter this in CMD to run the project. 1 $ node index.js Info Now the Bot is Online! YAY","title":"Running the Code"},{"location":"guides/discordjs/commands-handlers/","text":"Creating a Collection to store Commands and Aliases Open your index.js Put the below code in that 1 2 client . commands = new Discord . Collection (); client . aliases = new Discord . Collection (); Creating a commands folder Create a folder commands in the directory Enter the below in index.js 1 2 3 4 5 6 7 8 9 10 fs . readdir ( \"./commands/\" , ( error , files ) => { if ( error ) console . error ( error ); // return if a error files . forEach ( f => { if ( ! f . endsWith ( \".js\" )) return ; let props = require ( `./commands/ ${ f } ` ); // require the file client . commands . set ( props . help . name , props ); // set the properties props . help . aliases . forEach ( alias => client . aliases . set ( alias , props . help . name )); // set the aliases console . log ( `Loaded ${ props . help . name } ( ${ f } )` ); }); }); Info Commands folder is read using fs module. Creating message event Create a new file called message.js in events folder. Enter the below in message.js 1 2 3 4 5 6 7 8 9 10 module . exports = async ( client , message ) => { if ( message . author . bot ) return ; // return if the message is from a bot client . prefix = '!' ; if ( message . content . indexOf ( client . prefix ) !== 0 ) return ; // Check if there is the prefix at the start const args = message . content . split ( /\\s+/g ); // Splits at spaces and converts to Array const command = args . shift (). slice ( client . prefix . length ). toLowerCase (); // Slices the Command name from args and deletes the prefix from sliced name and changes to lowercase const cmd = client . commands . get ( command ); // Gets the Command Info if ( ! cmd ) return ; // Returns if there in no Command cmd . run ( client , message , args ); // Runs the module.exports.run function };","title":"Commands Handlers"},{"location":"guides/discordjs/commands-handlers/#creating-a-collection-to-store-commands-and-aliases","text":"Open your index.js Put the below code in that 1 2 client . commands = new Discord . Collection (); client . aliases = new Discord . Collection ();","title":"Creating a Collection to store Commands and Aliases"},{"location":"guides/discordjs/commands-handlers/#creating-a-commands-folder","text":"Create a folder commands in the directory Enter the below in index.js 1 2 3 4 5 6 7 8 9 10 fs . readdir ( \"./commands/\" , ( error , files ) => { if ( error ) console . error ( error ); // return if a error files . forEach ( f => { if ( ! f . endsWith ( \".js\" )) return ; let props = require ( `./commands/ ${ f } ` ); // require the file client . commands . set ( props . help . name , props ); // set the properties props . help . aliases . forEach ( alias => client . aliases . set ( alias , props . help . name )); // set the aliases console . log ( `Loaded ${ props . help . name } ( ${ f } )` ); }); }); Info Commands folder is read using fs module.","title":"Creating a commands folder"},{"location":"guides/discordjs/commands-handlers/#creating-message-event","text":"Create a new file called message.js in events folder. Enter the below in message.js 1 2 3 4 5 6 7 8 9 10 module . exports = async ( client , message ) => { if ( message . author . bot ) return ; // return if the message is from a bot client . prefix = '!' ; if ( message . content . indexOf ( client . prefix ) !== 0 ) return ; // Check if there is the prefix at the start const args = message . content . split ( /\\s+/g ); // Splits at spaces and converts to Array const command = args . shift (). slice ( client . prefix . length ). toLowerCase (); // Slices the Command name from args and deletes the prefix from sliced name and changes to lowercase const cmd = client . commands . get ( command ); // Gets the Command Info if ( ! cmd ) return ; // Returns if there in no Command cmd . run ( client , message , args ); // Runs the module.exports.run function };","title":"Creating message event"},{"location":"guides/discordjs/events-handlers/","text":"Event Handler Create a new folder called events in the directory. Enter the below in index.js 1 2 3 4 5 6 7 8 9 10 11 const fs = require ( \"fs\" ); // Using an inbuilt module to read files in a folder fs . readdir ( \"./events/\" , ( error , files ) => { if ( error ) console . error ( error ); // log of an error if found files . forEach ( f => { if ( ! f . endsWith ( \".js\" )) return ; // checks if the file ends with .js extension const event = require ( `./events/ ${ f } ` ); // event file. Example: message.js let file = f . split ( \".\" )[ 0 ]; // getting the file name a.k.a. event name client . on ( file , event . bind ( null , client )); // binding vars delete require . cache [ require . resolve ( `./events/ ${ file } ` )]; // deleting the cache after triggering the event }); }); Handling ready event Create a new file called ready.js in events folder. Enter the below in ready.js 1 2 3 module . exports = async ( client ) => { console . log ( `Logged in as ${ client . user . tag } ` ); };","title":"Events Handlers"},{"location":"guides/discordjs/events-handlers/#event-handler","text":"Create a new folder called events in the directory. Enter the below in index.js 1 2 3 4 5 6 7 8 9 10 11 const fs = require ( \"fs\" ); // Using an inbuilt module to read files in a folder fs . readdir ( \"./events/\" , ( error , files ) => { if ( error ) console . error ( error ); // log of an error if found files . forEach ( f => { if ( ! f . endsWith ( \".js\" )) return ; // checks if the file ends with .js extension const event = require ( `./events/ ${ f } ` ); // event file. Example: message.js let file = f . split ( \".\" )[ 0 ]; // getting the file name a.k.a. event name client . on ( file , event . bind ( null , client )); // binding vars delete require . cache [ require . resolve ( `./events/ ${ file } ` )]; // deleting the cache after triggering the event }); });","title":"Event Handler"},{"location":"guides/discordjs/events-handlers/#handling-ready-event","text":"Create a new file called ready.js in events folder. Enter the below in ready.js 1 2 3 module . exports = async ( client ) => { console . log ( `Logged in as ${ client . user . tag } ` ); };","title":"Handling ready event"},{"location":"guides/discordjs/events/","text":"Discord.JS triggers certain events when a message is sent or ready when the bot is ready. Info All the events can be referred here https://discord.js.org/#/docs/main/stable/class/Client Creating Event Handlers An Overview of using events. 1 2 3 client . on ( 'eventName' , ( args ) => { // Handle the events here }); Example Example of messageDelete event. 1 2 3 client . on ( \"messageDelete\" , ( message ) => { console . log ( `Content: ${ message . content } \\ nGuild: ${ message . guild . name } \\ nAuthor: ${ message . author . tag } \\ nChannel: ${ message . channel . name } ` ); });","title":"Events"},{"location":"guides/discordjs/events/#creating-event-handlers","text":"An Overview of using events. 1 2 3 client . on ( 'eventName' , ( args ) => { // Handle the events here });","title":"Creating Event Handlers"},{"location":"guides/discordjs/events/#example","text":"Example of messageDelete event. 1 2 3 client . on ( \"messageDelete\" , ( message ) => { console . log ( `Content: ${ message . content } \\ nGuild: ${ message . guild . name } \\ nAuthor: ${ message . author . tag } \\ nChannel: ${ message . channel . name } ` ); });","title":"Example"},{"location":"guides/discordjs/rank-card-using-canvas/","text":"Preview Output: Warning The above using a different font Base: Alternative If you are a beginner, you can use canvacord to do this! 1 $ npm install canvacord Info Canvacord has the same code below! Installing Canvas Open your command prompt (or) powershell and run the following command. 1 $ npm install canvas Creating a canvas Creating a new canvas to begin the rank card! 1 2 3 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); // Use this measurement if you are using the card in this tutorial const ctx = canvas . getContext ( \"2d\" ); Rank Card base You can use the base picture used in this tutorial or make your own one! 1 2 3 4 5 6 7 8 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); const ctx = canvas . getContext ( \"2d\" ); const rankCard = await Canvas . loadImage ( \"https://zyrouge.gq/assets/images/others/discord-js-rank-card.png\" ); ctx . drawImage ( rankCard , 0 , 0 , canvas . width , canvas . height ); const font = \"Arial\" ; // Default font Username Now lets write the username on the card 1 2 3 4 5 ctx . font = `bold 36px ${ font } ` ; // Weight - Bold, Size - 36px ctx . fillStyle = \"#FFFFFF\" ; // Color in hex value ctx . textAlign = \"start\" ; // Position of text starting const name = username > 7 ? username . substring ( 0 , 7 ). trim () + '...' : username ; // Shorten name if its long ctx . fillText ( ` ${ name } ` , 264 , 164 ); // Writing the username Discrim Writing Discriminator ( #0950 ) in the card 1 2 3 4 ctx . font = `36px ${ font } ` ; // Weight - Normal ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; // Reducing opacity using rgba ctx . textAlign = \"start\" ; if ( discrim ) ctx . fillText ( `# ${ discrim } ` , ctx . measureText ( name ). width + 10 + 316 , 164 ); // Writing discrim Level Writing the Level of the user in the card 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = '#FFFFFF' ; ctx . textAlign = \"end\" ; ctx . fillText ( level , 934 - 64 , 82 ); // const level = level of the user ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"LEVEL\" , 934 - 64 - ctx . measureText ( level ). width - 16 , 82 ); // Writing \"LEVEL\" Rank Writing the Rank ( #10 ) of the user in the card 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#ffffff\" ; ctx . textAlign = \"end\" ; ctx . fillText ( rank , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 , 82 ); // const rank = rank of the user ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"RANK\" , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 - ctx . measureText ( rank ). width - 16 , 82 ); // Writing \"RANK\" Writing Current and Needed EXP You must calculate proper value of current experience points and the maximum expirence point of the current level. This is also needed for progress bar in the card. 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.5)\" ; ctx . textAlign = \"start\" ; ctx . fillText ( \"/ \" + neededXP , 624 + ctx . measureText ( currentXP ). width + 10 , 164 ); ctx . fillStyle = \"#ffffff\" ; ctx . fillText ( currentXP , 624 , 164 ); Progress bar This is the most complex part of the entire rank card. This might be tricky but everything is possible. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ctx . beginPath (); ctx . fillStyle = \"#424751\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , 615 - 18.5 , 37.5 ); ctx . arc ( 257 + 615 , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); ctx . beginPath (); ctx . fillStyle = \"#ffffff\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , widthXP , 37.5 ); ctx . arc ( 257 + 18.5 + widthXP , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); Info If your bar exceeds the bar graph, add the below code before making the progress bar. 1 2 let widthXP = ( currentXP * 615 ) / neededXP ; if ( widthXP > 615 - 18.5 ) widthXP = 615 - 18.5 ; Avatar Finally drawing the avatar of the user 1 2 const avatar = await Canvas . loadImage ( avatarURLoftheUser ); ctx . drawImage ( avatar , 85 , 66 , 150 , 150 ); Info If you want a circle avatar you can clip the path before drawing the avatar! Getting the Buffer 1 const card = canvas . toBuffer (); Full Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); const ctx = canvas . getContext ( \"2d\" ); const rankCard = await Canvas . loadImage ( \"https://zyrouge.gq/assets/images/others/discord-js-rank-card.png\" ); ctx . drawImage ( rankCard , 0 , 0 , canvas . width , canvas . height ); const font = \"Arial\" ; ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#FFFFFF\" ; ctx . textAlign = \"start\" ; const name = username > 7 ? username . substring ( 0 , 7 ). trim () + '...' : username ; ctx . fillText ( ` ${ name } ` , 264 , 164 ); ctx . font = `36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . textAlign = \"center\" ; if ( discrim ) ctx . fillText ( `# ${ discrim } ` , ctx . measureText ( name ). width + 10 + 316 , 164 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = '#FFFFFF' ; ctx . textAlign = \"end\" ; ctx . fillText ( level , 934 - 64 , 82 ); ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"LEVEL\" , 934 - 64 - ctx . measureText ( level ). width - 16 , 82 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#ffffff\" ; ctx . textAlign = \"end\" ; ctx . fillText ( rank , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 , 82 ); ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"RANK\" , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 - ctx . measureText ( rank ). width - 16 , 82 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.5)\" ; ctx . textAlign = \"start\" ; ctx . fillText ( \"/ \" + neededXP , 624 + ctx . measureText ( currentXP ). width + 10 , 164 ); ctx . fillStyle = \"#ffffff\" ; ctx . fillText ( currentXP , 624 , 164 ); let widthXP = ( currentXP * 615 ) / neededXP ; if ( widthXP > 615 - 18.5 ) widthXP = 615 - 18.5 ; ctx . beginPath (); ctx . fillStyle = \"#424751\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , 615 - 18.5 , 37.5 ); ctx . arc ( 257 + 615 , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); ctx . beginPath (); ctx . fillStyle = \"#ffffff\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , widthXP , 37.5 ); ctx . arc ( 257 + 18.5 + widthXP , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); const avatar = await Canvas . loadImage ( avatarURL ); ctx . drawImage ( avatar , 85 , 66 , 150 , 150 ); const card = canvas . toBuffer (); Other Examples Aurora 's rank card:","title":"Rank card using canvas"},{"location":"guides/discordjs/rank-card-using-canvas/#preview","text":"Output: Warning The above using a different font Base:","title":"Preview"},{"location":"guides/discordjs/rank-card-using-canvas/#alternative","text":"If you are a beginner, you can use canvacord to do this! 1 $ npm install canvacord Info Canvacord has the same code below!","title":"Alternative"},{"location":"guides/discordjs/rank-card-using-canvas/#installing-canvas","text":"Open your command prompt (or) powershell and run the following command. 1 $ npm install canvas","title":"Installing Canvas"},{"location":"guides/discordjs/rank-card-using-canvas/#creating-a-canvas","text":"Creating a new canvas to begin the rank card! 1 2 3 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); // Use this measurement if you are using the card in this tutorial const ctx = canvas . getContext ( \"2d\" );","title":"Creating a canvas"},{"location":"guides/discordjs/rank-card-using-canvas/#rank-card-base","text":"You can use the base picture used in this tutorial or make your own one! 1 2 3 4 5 6 7 8 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); const ctx = canvas . getContext ( \"2d\" ); const rankCard = await Canvas . loadImage ( \"https://zyrouge.gq/assets/images/others/discord-js-rank-card.png\" ); ctx . drawImage ( rankCard , 0 , 0 , canvas . width , canvas . height ); const font = \"Arial\" ; // Default font","title":"Rank Card base"},{"location":"guides/discordjs/rank-card-using-canvas/#username","text":"Now lets write the username on the card 1 2 3 4 5 ctx . font = `bold 36px ${ font } ` ; // Weight - Bold, Size - 36px ctx . fillStyle = \"#FFFFFF\" ; // Color in hex value ctx . textAlign = \"start\" ; // Position of text starting const name = username > 7 ? username . substring ( 0 , 7 ). trim () + '...' : username ; // Shorten name if its long ctx . fillText ( ` ${ name } ` , 264 , 164 ); // Writing the username","title":"Username"},{"location":"guides/discordjs/rank-card-using-canvas/#discrim","text":"Writing Discriminator ( #0950 ) in the card 1 2 3 4 ctx . font = `36px ${ font } ` ; // Weight - Normal ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; // Reducing opacity using rgba ctx . textAlign = \"start\" ; if ( discrim ) ctx . fillText ( `# ${ discrim } ` , ctx . measureText ( name ). width + 10 + 316 , 164 ); // Writing discrim","title":"Discrim"},{"location":"guides/discordjs/rank-card-using-canvas/#level","text":"Writing the Level of the user in the card 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = '#FFFFFF' ; ctx . textAlign = \"end\" ; ctx . fillText ( level , 934 - 64 , 82 ); // const level = level of the user ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"LEVEL\" , 934 - 64 - ctx . measureText ( level ). width - 16 , 82 ); // Writing \"LEVEL\"","title":"Level"},{"location":"guides/discordjs/rank-card-using-canvas/#rank","text":"Writing the Rank ( #10 ) of the user in the card 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#ffffff\" ; ctx . textAlign = \"end\" ; ctx . fillText ( rank , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 , 82 ); // const rank = rank of the user ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"RANK\" , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 - ctx . measureText ( rank ). width - 16 , 82 ); // Writing \"RANK\"","title":"Rank"},{"location":"guides/discordjs/rank-card-using-canvas/#writing-current-and-needed-exp","text":"You must calculate proper value of current experience points and the maximum expirence point of the current level. This is also needed for progress bar in the card. 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.5)\" ; ctx . textAlign = \"start\" ; ctx . fillText ( \"/ \" + neededXP , 624 + ctx . measureText ( currentXP ). width + 10 , 164 ); ctx . fillStyle = \"#ffffff\" ; ctx . fillText ( currentXP , 624 , 164 );","title":"Writing Current and Needed EXP"},{"location":"guides/discordjs/rank-card-using-canvas/#progress-bar","text":"This is the most complex part of the entire rank card. This might be tricky but everything is possible. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ctx . beginPath (); ctx . fillStyle = \"#424751\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , 615 - 18.5 , 37.5 ); ctx . arc ( 257 + 615 , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); ctx . beginPath (); ctx . fillStyle = \"#ffffff\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , widthXP , 37.5 ); ctx . arc ( 257 + 18.5 + widthXP , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); Info If your bar exceeds the bar graph, add the below code before making the progress bar. 1 2 let widthXP = ( currentXP * 615 ) / neededXP ; if ( widthXP > 615 - 18.5 ) widthXP = 615 - 18.5 ;","title":"Progress bar"},{"location":"guides/discordjs/rank-card-using-canvas/#avatar","text":"Finally drawing the avatar of the user 1 2 const avatar = await Canvas . loadImage ( avatarURLoftheUser ); ctx . drawImage ( avatar , 85 , 66 , 150 , 150 ); Info If you want a circle avatar you can clip the path before drawing the avatar!","title":"Avatar"},{"location":"guides/discordjs/rank-card-using-canvas/#getting-the-buffer","text":"1 const card = canvas . toBuffer ();","title":"Getting the Buffer"},{"location":"guides/discordjs/rank-card-using-canvas/#full-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); const ctx = canvas . getContext ( \"2d\" ); const rankCard = await Canvas . loadImage ( \"https://zyrouge.gq/assets/images/others/discord-js-rank-card.png\" ); ctx . drawImage ( rankCard , 0 , 0 , canvas . width , canvas . height ); const font = \"Arial\" ; ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#FFFFFF\" ; ctx . textAlign = \"start\" ; const name = username > 7 ? username . substring ( 0 , 7 ). trim () + '...' : username ; ctx . fillText ( ` ${ name } ` , 264 , 164 ); ctx . font = `36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . textAlign = \"center\" ; if ( discrim ) ctx . fillText ( `# ${ discrim } ` , ctx . measureText ( name ). width + 10 + 316 , 164 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = '#FFFFFF' ; ctx . textAlign = \"end\" ; ctx . fillText ( level , 934 - 64 , 82 ); ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"LEVEL\" , 934 - 64 - ctx . measureText ( level ). width - 16 , 82 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#ffffff\" ; ctx . textAlign = \"end\" ; ctx . fillText ( rank , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 , 82 ); ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"RANK\" , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 - ctx . measureText ( rank ). width - 16 , 82 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.5)\" ; ctx . textAlign = \"start\" ; ctx . fillText ( \"/ \" + neededXP , 624 + ctx . measureText ( currentXP ). width + 10 , 164 ); ctx . fillStyle = \"#ffffff\" ; ctx . fillText ( currentXP , 624 , 164 ); let widthXP = ( currentXP * 615 ) / neededXP ; if ( widthXP > 615 - 18.5 ) widthXP = 615 - 18.5 ; ctx . beginPath (); ctx . fillStyle = \"#424751\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , 615 - 18.5 , 37.5 ); ctx . arc ( 257 + 615 , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); ctx . beginPath (); ctx . fillStyle = \"#ffffff\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , widthXP , 37.5 ); ctx . arc ( 257 + 18.5 + widthXP , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); const avatar = await Canvas . loadImage ( avatarURL ); ctx . drawImage ( avatar , 85 , 66 , 150 , 150 ); const card = canvas . toBuffer ();","title":"Full Code"},{"location":"guides/discordjs/rank-card-using-canvas/#other-examples","text":"Aurora 's rank card:","title":"Other Examples"},{"location":"guides/nodejs/getting-started-with-nodejs/","text":"Installing NodeJS Download and install from NodeJS Website Creating a Project 1 npm init Installing Modules 1 npm install module-name Installing Globally 1 npm install -g module-name","title":"Getting Started with NodeJS"},{"location":"guides/nodejs/getting-started-with-nodejs/#installing-nodejs","text":"Download and install from NodeJS Website","title":"Installing NodeJS"},{"location":"guides/nodejs/getting-started-with-nodejs/#creating-a-project","text":"1 npm init","title":"Creating a Project"},{"location":"guides/nodejs/getting-started-with-nodejs/#installing-modules","text":"1 npm install module-name","title":"Installing Modules"},{"location":"guides/nodejs/getting-started-with-nodejs/#installing-globally","text":"1 npm install -g module-name","title":"Installing Globally"},{"location":"guides/sequelize/creating-keys-in-models/","text":"Creating a Key The Async/Await method 1 2 const result = await database . create ({ key : \"test\" , value : 1 }); console . log ( result ); The .then() method 1 2 3 4 database . create ({ key : \"test\" , value : 1 }) . then (( result ) => console . log ( result )) . catch ( console . error );","title":"Creating a Key"},{"location":"guides/sequelize/creating-keys-in-models/#creating-a-key","text":"The Async/Await method 1 2 const result = await database . create ({ key : \"test\" , value : 1 }); console . log ( result ); The .then() method 1 2 3 4 database . create ({ key : \"test\" , value : 1 }) . then (( result ) => console . log ( result )) . catch ( console . error );","title":"Creating a Key"},{"location":"guides/sequelize/creating-models/","text":"Defining a Model 1 2 3 4 5 6 7 8 9 10 11 12 const Sequelize = require ( \"sequelize\" ); const sequelize = new Sequelize ( 'database' , 'user' , 'password' , { host : 'localhost' , dialect : 'sqlite' , // using sqlite3 here (must install sqlite3 to use it) logging : false , storage : 'database.sqlite' }); const database = sequelize . define ( 'nameOfTheTable' , { key : Sequelize . STRING , // more datatypes can be found at Sequelize Docs value : Sequelize . NUMBER }); Syncing the Models The Async/Await Method 1 2 await database . sync (); console . log ( 'Database Loaded!' ) The .then method 1 2 3 database . sync () . then (() => console . log ( 'Database Loaded!' ));","title":"Creating Models"},{"location":"guides/sequelize/creating-models/#defining-a-model","text":"1 2 3 4 5 6 7 8 9 10 11 12 const Sequelize = require ( \"sequelize\" ); const sequelize = new Sequelize ( 'database' , 'user' , 'password' , { host : 'localhost' , dialect : 'sqlite' , // using sqlite3 here (must install sqlite3 to use it) logging : false , storage : 'database.sqlite' }); const database = sequelize . define ( 'nameOfTheTable' , { key : Sequelize . STRING , // more datatypes can be found at Sequelize Docs value : Sequelize . NUMBER });","title":"Defining a Model"},{"location":"guides/sequelize/creating-models/#syncing-the-models","text":"The Async/Await Method 1 2 await database . sync (); console . log ( 'Database Loaded!' ) The .then method 1 2 3 database . sync () . then (() => console . log ( 'Database Loaded!' ));","title":"Syncing the Models"},{"location":"guides/sequelize/deleting-keys-in-models/","text":"Deleting a Key The Async/Await method 1 2 const result = await database . destroy ({ where : { key : \"test\" } }); console . log ( result ); The .then() method 1 2 3 4 database . destroy ({ where : { key : \"test\" } }) . then ( result => console . log ( result )) . catch ( console . error );","title":"Deleting a Key"},{"location":"guides/sequelize/deleting-keys-in-models/#deleting-a-key","text":"The Async/Await method 1 2 const result = await database . destroy ({ where : { key : \"test\" } }); console . log ( result ); The .then() method 1 2 3 4 database . destroy ({ where : { key : \"test\" } }) . then ( result => console . log ( result )) . catch ( console . error );","title":"Deleting a Key"},{"location":"guides/sequelize/finding-all-keys-in-model/","text":"Finding All The Async/Await method 1 2 const result = await database . findAll (); console . log ( result ); The .then() method 1 2 3 database . findAll () . then ( result => console . log ( result )) . catch ( console . error );","title":"Finding all the Keys"},{"location":"guides/sequelize/finding-all-keys-in-model/#finding-all","text":"The Async/Await method 1 2 const result = await database . findAll (); console . log ( result ); The .then() method 1 2 3 database . findAll () . then ( result => console . log ( result )) . catch ( console . error );","title":"Finding All"},{"location":"guides/sequelize/finding-keys-in-models/","text":"Finding only One The Async/Await method 1 2 const result = await database . findOne ({ where : { key : \"test\" } }); console . log ( result ); The .then method 1 2 3 4 database . findOne ({ key : \"test\" }) . then (( result ) => console . log ( result )) . catch ( console . error ); Info Many Parameters can be specified in where options.","title":"Finding a Key"},{"location":"guides/sequelize/finding-keys-in-models/#finding-only-one","text":"The Async/Await method 1 2 const result = await database . findOne ({ where : { key : \"test\" } }); console . log ( result ); The .then method 1 2 3 4 database . findOne ({ key : \"test\" }) . then (( result ) => console . log ( result )) . catch ( console . error ); Info Many Parameters can be specified in where options.","title":"Finding only One"},{"location":"guides/sequelize/getting-started-with-sequelize/","text":"Installing Sequelize 1 npm install sequelize Official Documentation Sequelize v5 Sequelize v4 Sequelize v3","title":"Getting started with Sequelize"},{"location":"guides/sequelize/getting-started-with-sequelize/#installing-sequelize","text":"1 npm install sequelize","title":"Installing Sequelize"},{"location":"guides/sequelize/getting-started-with-sequelize/#official-documentation","text":"Sequelize v5 Sequelize v4 Sequelize v3","title":"Official Documentation"},{"location":"guides/sequelize/updating-keys-in-models/","text":"Updating a Key The Async/Await method 1 2 const result = await database . update ({ value : 2 }, { where : { key : \"test\" } }); console . log ( result ); The .then method 1 2 3 4 database . update ({ value : 2 }, { where : { key : \"test\" } }) . then ( result => console . log ( result )) . catch ( console . error );","title":"Updating a Key"},{"location":"guides/sequelize/updating-keys-in-models/#updating-a-key","text":"The Async/Await method 1 2 const result = await database . update ({ value : 2 }, { where : { key : \"test\" } }); console . log ( result ); The .then method 1 2 3 4 database . update ({ value : 2 }, { where : { key : \"test\" } }) . then ( result => console . log ( result )) . catch ( console . error );","title":"Updating a Key"}]}