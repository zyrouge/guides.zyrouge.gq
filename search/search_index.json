{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello \ud83d\udc4b everyone, welcome to my guides page! Who am I? \u00b6 I'm just a small 16 year-old who loves to develope frontend and backend stuffs. What do I do? \u00b6 I make Websites, Discord Bots, NPM Packages and some open-source codes. Meanwhile I upload on YouTube and this blog! Need Help? \u00b6 Join our Discord Server !","title":"Home"},{"location":"#who-am-i","text":"I'm just a small 16 year-old who loves to develope frontend and backend stuffs.","title":"Who am I?"},{"location":"#what-do-i-do","text":"I make Websites, Discord Bots, NPM Packages and some open-source codes. Meanwhile I upload on YouTube and this blog!","title":"What do I do?"},{"location":"#need-help","text":"Join our Discord Server !","title":"Need Help?"},{"location":"discordjs/coding/","text":"Creating Main File \u00b6 Create a file named index.js in the main directory. I recommend using a IDE like Visual Studio Code or others like Atom, IDEA for easy programming. Creating Client in the Main File \u00b6 1 2 const Discord = require ( \"discord.js\" ); const client = Discord . Client (); Login in the bot \u00b6 Now we have created the bot but its not yet online. Lets make it login using the Token. 1 2 3 4 const Discord = require ( \"discord.js\" ); const client = Discord . Client (); client . login ( 'PUTYOURTOKENHERE' ); Danger Never reveal your Token to anyone! Running the Code \u00b6 Enter this in CMD to run the project. 1 $ node index.js Info Now the Bot is Online! YAY","title":"Coding Discord Bot using discord.js"},{"location":"discordjs/coding/#creating-main-file","text":"Create a file named index.js in the main directory. I recommend using a IDE like Visual Studio Code or others like Atom, IDEA for easy programming.","title":"Creating Main File"},{"location":"discordjs/coding/#creating-client-in-the-main-file","text":"1 2 const Discord = require ( \"discord.js\" ); const client = Discord . Client ();","title":"Creating Client in the Main File"},{"location":"discordjs/coding/#login-in-the-bot","text":"Now we have created the bot but its not yet online. Lets make it login using the Token. 1 2 3 4 const Discord = require ( \"discord.js\" ); const client = Discord . Client (); client . login ( 'PUTYOURTOKENHERE' ); Danger Never reveal your Token to anyone!","title":"Login in the bot"},{"location":"discordjs/coding/#running-the-code","text":"Enter this in CMD to run the project. 1 $ node index.js Info Now the Bot is Online! YAY","title":"Running the Code"},{"location":"discordjs/commands-handlers/","text":"Creating a Collection to store Commands and Aliases \u00b6 Open your index.js Put the below code in that 1 2 client . commands = new Discord . Collection (); client . aliases = new Discord . Collection (); Creating a commands folder \u00b6 Create a folder commands in the directory Enter the below in index.js 1 2 3 4 5 6 7 8 9 10 fs . readdir ( \"./commands/\" , ( error , files ) => { if ( error ) console . error ( error ); // return if a error files . forEach ( f => { if ( ! f . endsWith ( \".js\" )) return ; let props = require ( `./commands/ ${ f } ` ); // require the file client . commands . set ( props . help . name , props ); // set the properties props . help . aliases . forEach ( alias => client . aliases . set ( alias , props . help . name )); // set the aliases console . log ( `Loaded ${ props . help . name } ( ${ f } )` ); }); }); Info Commands folder is read using fs module. Creating message event \u00b6 Create a new file called message.js in events folder. Enter the below in message.js 1 2 3 4 5 6 7 8 9 10 module . exports = async ( client , message ) => { if ( message . author . bot ) return ; // return if the message is from a bot client . prefix = '!' ; if ( message . content . indexOf ( client . prefix ) !== 0 ) return ; // Check if there is the prefix at the start const args = message . content . split ( /\\s+/g ); // Splits at spaces and converts to Array const command = args . shift (). slice ( client . prefix . length ). toLowerCase (); // Slices the Command name from args and deletes the prefix from sliced name and changes to lowercase const cmd = client . commands . get ( command ); // Gets the Command Info if ( ! cmd ) return ; // Returns if there in no Command cmd . run ( client , message , args ); // Runs the module.exports.run function };","title":"Commands Handlers"},{"location":"discordjs/commands-handlers/#creating-a-collection-to-store-commands-and-aliases","text":"Open your index.js Put the below code in that 1 2 client . commands = new Discord . Collection (); client . aliases = new Discord . Collection ();","title":"Creating a Collection to store Commands and Aliases"},{"location":"discordjs/commands-handlers/#creating-a-commands-folder","text":"Create a folder commands in the directory Enter the below in index.js 1 2 3 4 5 6 7 8 9 10 fs . readdir ( \"./commands/\" , ( error , files ) => { if ( error ) console . error ( error ); // return if a error files . forEach ( f => { if ( ! f . endsWith ( \".js\" )) return ; let props = require ( `./commands/ ${ f } ` ); // require the file client . commands . set ( props . help . name , props ); // set the properties props . help . aliases . forEach ( alias => client . aliases . set ( alias , props . help . name )); // set the aliases console . log ( `Loaded ${ props . help . name } ( ${ f } )` ); }); }); Info Commands folder is read using fs module.","title":"Creating a commands folder"},{"location":"discordjs/commands-handlers/#creating-message-event","text":"Create a new file called message.js in events folder. Enter the below in message.js 1 2 3 4 5 6 7 8 9 10 module . exports = async ( client , message ) => { if ( message . author . bot ) return ; // return if the message is from a bot client . prefix = '!' ; if ( message . content . indexOf ( client . prefix ) !== 0 ) return ; // Check if there is the prefix at the start const args = message . content . split ( /\\s+/g ); // Splits at spaces and converts to Array const command = args . shift (). slice ( client . prefix . length ). toLowerCase (); // Slices the Command name from args and deletes the prefix from sliced name and changes to lowercase const cmd = client . commands . get ( command ); // Gets the Command Info if ( ! cmd ) return ; // Returns if there in no Command cmd . run ( client , message , args ); // Runs the module.exports.run function };","title":"Creating message event"},{"location":"discordjs/events-handlers/","text":"Event Handler \u00b6 Create a new folder called events in the directory. Enter the below in index.js 1 2 3 4 5 6 7 8 9 10 11 const fs = require ( \"fs\" ); // Using an inbuilt module to read files in a folder fs . readdir ( \"./events/\" , ( error , files ) => { if ( error ) console . error ( error ); // log of an error if found files . forEach ( f => { if ( ! f . endsWith ( \".js\" )) return ; // checks if the file ends with .js extension const event = require ( `./events/ ${ f } ` ); // event file. Example: message.js let file = f . split ( \".\" )[ 0 ]; // getting the file name a.k.a. event name client . on ( file , event . bind ( null , client )); // binding vars delete require . cache [ require . resolve ( `./events/ ${ file } ` )]; // deleting the cache after triggering the event }); }); Handling ready event \u00b6 Create a new file called ready.js in events folder. Enter the below in ready.js 1 2 3 module . exports = async ( client ) => { console . log ( `Logged in as ${ client . user . tag } ` ); };","title":"Events Handlers"},{"location":"discordjs/events-handlers/#event-handler","text":"Create a new folder called events in the directory. Enter the below in index.js 1 2 3 4 5 6 7 8 9 10 11 const fs = require ( \"fs\" ); // Using an inbuilt module to read files in a folder fs . readdir ( \"./events/\" , ( error , files ) => { if ( error ) console . error ( error ); // log of an error if found files . forEach ( f => { if ( ! f . endsWith ( \".js\" )) return ; // checks if the file ends with .js extension const event = require ( `./events/ ${ f } ` ); // event file. Example: message.js let file = f . split ( \".\" )[ 0 ]; // getting the file name a.k.a. event name client . on ( file , event . bind ( null , client )); // binding vars delete require . cache [ require . resolve ( `./events/ ${ file } ` )]; // deleting the cache after triggering the event }); });","title":"Event Handler"},{"location":"discordjs/events-handlers/#handling-ready-event","text":"Create a new file called ready.js in events folder. Enter the below in ready.js 1 2 3 module . exports = async ( client ) => { console . log ( `Logged in as ${ client . user . tag } ` ); };","title":"Handling ready event"},{"location":"discordjs/events/","text":"Discord.JS triggers certain events when a message is sent or ready when the bot is ready. Tip All the events can be referred here Creating Event Handlers \u00b6 An Overview of using events. 1 2 3 client . on ( 'eventName' , ( args ) => { // Handle the events here }); Example \u00b6 Example of messageDelete event. 1 2 3 client . on ( \"messageDelete\" , ( message ) => { console . log ( `Content: ${ message . content } \\ nGuild: ${ message . guild . name } \\ nAuthor: ${ message . author . tag } \\ nChannel: ${ message . channel . name } ` ); });","title":"Events"},{"location":"discordjs/events/#creating-event-handlers","text":"An Overview of using events. 1 2 3 client . on ( 'eventName' , ( args ) => { // Handle the events here });","title":"Creating Event Handlers"},{"location":"discordjs/events/#example","text":"Example of messageDelete event. 1 2 3 client . on ( \"messageDelete\" , ( message ) => { console . log ( `Content: ${ message . content } \\ nGuild: ${ message . guild . name } \\ nAuthor: ${ message . author . tag } \\ nChannel: ${ message . channel . name } ` ); });","title":"Example"},{"location":"discordjs/kick-command/","text":"Info Check this YouTube Video to see this in real action! Base \u00b6 1 2 3 4 5 module . exports = { name : \"kick\" , aliases : [], run : async () => {} } Finding mentioned User or look for the ID \u00b6 1 2 3 4 5 6 7 8 9 module . exports = { name : \"kick\" , aliases : [], run : async ( client , message , args ) => { const [ id , ... reason ] = args ; // Modern Deconstruction const member = message . mentions . members . first () || message . guild . members . cache . get ( id ); if ( ! member ) return message . channel . send ( \"Provide a User mention or ID to kick\" ); } } Checking if the member is kickable \u00b6 1 2 3 4 5 6 7 8 9 10 module . exports = { name : \"kick\" , aliases : [], run : async ( client , message , args ) => { const [ id , ... reason ] = args ; const member = message . mentions . members . first () || message . guild . members . cache . get ( id ); if ( ! member ) return message . channel . send ( \"Provide a User mention or ID to kick\" ); if ( ! member . kickable ) return message . channel . send ( `Cannot **kick** ${ member } !` ); } } Kicking the member \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 module . exports = { name : \"kick\" , aliases : [], run : async ( client , message , args ) => { const [ id , ... reason ] = args ; const member = message . mentions . members . first () || message . guild . members . cache . get ( id ); if ( ! member ) return message . channel . send ( \"Provide a User mention or ID to kick\" ); if ( ! member . kickable ) return message . channel . send ( `Cannot **kick** ${ member } !` ); member . kick ( reason . join ( \" \" )) . then (() => { message . channel . send ( `Kicked ** ${ member . user . tag } **` ); }) . catch (( err ) => { message . channel . send ( `Could not ban ** ${ member . user . tag } **. Reason: \\` ${ err } \\`` ); }); } } Full Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 module . exports = { name : \"kick\" , aliases : [], run : async ( client , message , args ) => { const [ id , ... reason ] = args ; const member = message . mentions . members . first () || message . guild . members . cache . get ( id ); if ( ! member ) return message . channel . send ( \"Provide a User mention or ID to kick\" ); if ( ! member . kickable ) return message . channel . send ( `Cannot **kick** ${ member } !` ); member . kick ( reason . join ( \" \" )) . then (() => { message . channel . send ( `Kicked ** ${ member . user . tag } **` ); }) . catch (( err ) => { message . channel . send ( `Could not ban ** ${ member . user . tag } **. Reason: \\` ${ err } \\`` ); }); } }","title":"Kick command"},{"location":"discordjs/kick-command/#base","text":"1 2 3 4 5 module . exports = { name : \"kick\" , aliases : [], run : async () => {} }","title":"Base"},{"location":"discordjs/kick-command/#finding-mentioned-user-or-look-for-the-id","text":"1 2 3 4 5 6 7 8 9 module . exports = { name : \"kick\" , aliases : [], run : async ( client , message , args ) => { const [ id , ... reason ] = args ; // Modern Deconstruction const member = message . mentions . members . first () || message . guild . members . cache . get ( id ); if ( ! member ) return message . channel . send ( \"Provide a User mention or ID to kick\" ); } }","title":"Finding mentioned User or look for the ID"},{"location":"discordjs/kick-command/#checking-if-the-member-is-kickable","text":"1 2 3 4 5 6 7 8 9 10 module . exports = { name : \"kick\" , aliases : [], run : async ( client , message , args ) => { const [ id , ... reason ] = args ; const member = message . mentions . members . first () || message . guild . members . cache . get ( id ); if ( ! member ) return message . channel . send ( \"Provide a User mention or ID to kick\" ); if ( ! member . kickable ) return message . channel . send ( `Cannot **kick** ${ member } !` ); } }","title":"Checking if the member is kickable"},{"location":"discordjs/kick-command/#kicking-the-member","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 module . exports = { name : \"kick\" , aliases : [], run : async ( client , message , args ) => { const [ id , ... reason ] = args ; const member = message . mentions . members . first () || message . guild . members . cache . get ( id ); if ( ! member ) return message . channel . send ( \"Provide a User mention or ID to kick\" ); if ( ! member . kickable ) return message . channel . send ( `Cannot **kick** ${ member } !` ); member . kick ( reason . join ( \" \" )) . then (() => { message . channel . send ( `Kicked ** ${ member . user . tag } **` ); }) . catch (( err ) => { message . channel . send ( `Could not ban ** ${ member . user . tag } **. Reason: \\` ${ err } \\`` ); }); } }","title":"Kicking the member"},{"location":"discordjs/kick-command/#full-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 module . exports = { name : \"kick\" , aliases : [], run : async ( client , message , args ) => { const [ id , ... reason ] = args ; const member = message . mentions . members . first () || message . guild . members . cache . get ( id ); if ( ! member ) return message . channel . send ( \"Provide a User mention or ID to kick\" ); if ( ! member . kickable ) return message . channel . send ( `Cannot **kick** ${ member } !` ); member . kick ( reason . join ( \" \" )) . then (() => { message . channel . send ( `Kicked ** ${ member . user . tag } **` ); }) . catch (( err ) => { message . channel . send ( `Could not ban ** ${ member . user . tag } **. Reason: \\` ${ err } \\`` ); }); } }","title":"Full Code"},{"location":"discordjs/prefix-command/","text":"Info Check this YouTube Video to see this in real action! Base \u00b6 1 2 3 4 5 module . exports = { name : \"prefix\" , aliases : [ \"pre\" ], run : async () => {} } Installing database packages \u00b6 1 npm i keyvify better-sqlite Info You can use other dialects like Mongodb, Postgres. Check out Keyvify docs. Setting up Database \u00b6 In main file ( index.js ) 1 2 3 4 client . database = Keyvify ( \"guilddatabase\" , { dialect : \"better-sqlite\" , storage : ` ${ __dirname } /data/database.sqlite` }); Connecting to database when bot is ready \u00b6 1 2 3 4 client . on ( 'ready' , async () => { console . log ( 'I am ready!' ); await client . database . connect (); }); Getting Prefix from Database \u00b6 1 2 3 4 5 6 7 8 9 module . exports = { name : \"prefix\" , aliases : [ \"pre\" ], run : async ( client , message , args ) => { const nPrefix = args [ 0 ]; // Checks if user specified new prefix const pPrefix = ( await client . database . get ( message . guild . id )). value || {}; if ( ! nPrefix ) return message . channel . send ( `Prefix: \\` ${ pPrefix . prefix || client . prefix } \\`` ); } } Setting new prefix in the Database \u00b6 1 2 3 4 5 6 7 8 9 10 11 module . exports = { name : \"prefix\" , aliases : [ \"pre\" ], run : async ( client , message , args ) => { const nPrefix = args [ 0 ]; const pPrefix = ( await client . database . get ( message . guild . id )). value || {}; if ( ! nPrefix ) return message . channel . send ( `Prefix: \\` ${ pPrefix . prefix || client . prefix } \\`` ); await client . database . set ([ message . guild . id , \"prefix\" ], nPrefix ); message . channel . send ( `Prefix changed to \\` ${ nPrefix } \\`` ); } } Checking for Custom Prefix \u00b6 1 2 3 4 5 6 7 8 9 10 client . on ( 'message' , async ( message ) => { if ( message . author . bot ) return ; const gConfig = ( await client . database . get ( message . guild . id )). value || {}; const prefix = gConfig . prefix || client . prefix ; if ( message . content . indexOf ( prefix ) !== 0 ) return ; const args = message . content . slice ( prefix . length ). split ( \" \" ); const command = args . shift (). toLowerCase (); const cmd = client . commands . get ( command ) || client . commands . get ( client . aliases . get ( command )); if ( cmd ) cmd . run ( client , message , args ); }); Full Code \u00b6 Main file ( index.js ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 const { Client , Collection } = require ( \"discord.js\" ); const { token } = require ( \"./config.json\" ); const fs = require ( \"fs\" ); const { Keyvify } = require ( \"keyvify\" ); const client = new Client (); client . commands = new Collection (); client . aliases = new Collection (); client . prefix = \",\" ; client . database = Keyvify ( \"guilddatabase\" , { dialect : \"better-sqlite\" , storage : ` ${ __dirname } /data/database.sqlite` }); client . on ( 'ready' , async () => { console . log ( `I am ready!` ); await client . database . connect (); }); const init = async () => { fs . readdir ( `./commands` , ( err , files ) => { if ( err ) return console . error ( err ); files . forEach ( file => { const props = require ( `./commands/ ${ file } ` ); client . commands . set ( props . name , props ); props . aliases . forEach ( alias => client . aliases . set ( alias , props . name )); console . log ( `Loaded ${ file } ` ); }) }); }; init (); client . on ( 'message' , async ( message ) => { if ( message . author . bot ) return ; const gConfig = ( await client . database . get ( message . guild . id )). value || {}; const prefix = gConfig . prefix || client . prefix ; if ( message . content . indexOf ( prefix ) !== 0 ) return ; const args = message . content . slice ( prefix . length ). split ( \" \" ); const command = args . shift (). toLowerCase (); const cmd = client . commands . get ( command ) || client . commands . get ( client . aliases . get ( command )); if ( cmd ) cmd . run ( client , message , args ); }); client . login ( token ); Prefix Command File ( commands/prefix.js ) 1 2 3 4 5 6 7 8 9 10 11 module . exports = { name : \"prefix\" , aliases : [ \"pre\" ], run : async ( client , message , args ) => { const nPrefix = args [ 0 ]; const pPrefix = ( await client . database . get ( message . guild . id )). value || {}; if ( ! nPrefix ) return message . channel . send ( `Prefix: \\` ${ pPrefix . prefix || client . prefix } \\`` ); await client . database . set ([ message . guild . id , \"prefix\" ], nPrefix ); message . channel . send ( `Prefix changed to \\` ${ nPrefix } \\`` ); } }","title":"Prefix command"},{"location":"discordjs/prefix-command/#base","text":"1 2 3 4 5 module . exports = { name : \"prefix\" , aliases : [ \"pre\" ], run : async () => {} }","title":"Base"},{"location":"discordjs/prefix-command/#installing-database-packages","text":"1 npm i keyvify better-sqlite Info You can use other dialects like Mongodb, Postgres. Check out Keyvify docs.","title":"Installing database packages"},{"location":"discordjs/prefix-command/#setting-up-database","text":"In main file ( index.js ) 1 2 3 4 client . database = Keyvify ( \"guilddatabase\" , { dialect : \"better-sqlite\" , storage : ` ${ __dirname } /data/database.sqlite` });","title":"Setting up Database"},{"location":"discordjs/prefix-command/#connecting-to-database-when-bot-is-ready","text":"1 2 3 4 client . on ( 'ready' , async () => { console . log ( 'I am ready!' ); await client . database . connect (); });","title":"Connecting to database when bot is ready"},{"location":"discordjs/prefix-command/#getting-prefix-from-database","text":"1 2 3 4 5 6 7 8 9 module . exports = { name : \"prefix\" , aliases : [ \"pre\" ], run : async ( client , message , args ) => { const nPrefix = args [ 0 ]; // Checks if user specified new prefix const pPrefix = ( await client . database . get ( message . guild . id )). value || {}; if ( ! nPrefix ) return message . channel . send ( `Prefix: \\` ${ pPrefix . prefix || client . prefix } \\`` ); } }","title":"Getting Prefix from Database"},{"location":"discordjs/prefix-command/#setting-new-prefix-in-the-database","text":"1 2 3 4 5 6 7 8 9 10 11 module . exports = { name : \"prefix\" , aliases : [ \"pre\" ], run : async ( client , message , args ) => { const nPrefix = args [ 0 ]; const pPrefix = ( await client . database . get ( message . guild . id )). value || {}; if ( ! nPrefix ) return message . channel . send ( `Prefix: \\` ${ pPrefix . prefix || client . prefix } \\`` ); await client . database . set ([ message . guild . id , \"prefix\" ], nPrefix ); message . channel . send ( `Prefix changed to \\` ${ nPrefix } \\`` ); } }","title":"Setting new prefix in the Database"},{"location":"discordjs/prefix-command/#checking-for-custom-prefix","text":"1 2 3 4 5 6 7 8 9 10 client . on ( 'message' , async ( message ) => { if ( message . author . bot ) return ; const gConfig = ( await client . database . get ( message . guild . id )). value || {}; const prefix = gConfig . prefix || client . prefix ; if ( message . content . indexOf ( prefix ) !== 0 ) return ; const args = message . content . slice ( prefix . length ). split ( \" \" ); const command = args . shift (). toLowerCase (); const cmd = client . commands . get ( command ) || client . commands . get ( client . aliases . get ( command )); if ( cmd ) cmd . run ( client , message , args ); });","title":"Checking for Custom Prefix"},{"location":"discordjs/prefix-command/#full-code","text":"Main file ( index.js ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 const { Client , Collection } = require ( \"discord.js\" ); const { token } = require ( \"./config.json\" ); const fs = require ( \"fs\" ); const { Keyvify } = require ( \"keyvify\" ); const client = new Client (); client . commands = new Collection (); client . aliases = new Collection (); client . prefix = \",\" ; client . database = Keyvify ( \"guilddatabase\" , { dialect : \"better-sqlite\" , storage : ` ${ __dirname } /data/database.sqlite` }); client . on ( 'ready' , async () => { console . log ( `I am ready!` ); await client . database . connect (); }); const init = async () => { fs . readdir ( `./commands` , ( err , files ) => { if ( err ) return console . error ( err ); files . forEach ( file => { const props = require ( `./commands/ ${ file } ` ); client . commands . set ( props . name , props ); props . aliases . forEach ( alias => client . aliases . set ( alias , props . name )); console . log ( `Loaded ${ file } ` ); }) }); }; init (); client . on ( 'message' , async ( message ) => { if ( message . author . bot ) return ; const gConfig = ( await client . database . get ( message . guild . id )). value || {}; const prefix = gConfig . prefix || client . prefix ; if ( message . content . indexOf ( prefix ) !== 0 ) return ; const args = message . content . slice ( prefix . length ). split ( \" \" ); const command = args . shift (). toLowerCase (); const cmd = client . commands . get ( command ) || client . commands . get ( client . aliases . get ( command )); if ( cmd ) cmd . run ( client , message , args ); }); client . login ( token ); Prefix Command File ( commands/prefix.js ) 1 2 3 4 5 6 7 8 9 10 11 module . exports = { name : \"prefix\" , aliases : [ \"pre\" ], run : async ( client , message , args ) => { const nPrefix = args [ 0 ]; const pPrefix = ( await client . database . get ( message . guild . id )). value || {}; if ( ! nPrefix ) return message . channel . send ( `Prefix: \\` ${ pPrefix . prefix || client . prefix } \\`` ); await client . database . set ([ message . guild . id , \"prefix\" ], nPrefix ); message . channel . send ( `Prefix changed to \\` ${ nPrefix } \\`` ); } }","title":"Full Code"},{"location":"discordjs/rank-card-using-canvas/","text":"Preview \u00b6 Output: Warning The above using a different font Base: Alternative \u00b6 If you are a beginner, you can use canvacord to do this! 1 $ npm install canvacord Info Canvacord has the same code below! Installing Canvas \u00b6 Open your command prompt (or) powershell and run the following command. 1 $ npm install canvas Creating a canvas \u00b6 Creating a new canvas to begin the rank card! 1 2 3 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); // Use this measurement if you are using the card in this tutorial const ctx = canvas . getContext ( \"2d\" ); Rank Card base \u00b6 You can use the base picture used in this tutorial or make your own one! 1 2 3 4 5 6 7 8 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); const ctx = canvas . getContext ( \"2d\" ); const rankCard = await Canvas . loadImage ( \"https://zyrouge.gq/assets/images/others/discord-js-rank-card.png\" ); ctx . drawImage ( rankCard , 0 , 0 , canvas . width , canvas . height ); const font = \"Arial\" ; // Default font Username \u00b6 Now lets write the username on the card 1 2 3 4 5 ctx . font = `bold 36px ${ font } ` ; // Weight - Bold, Size - 36px ctx . fillStyle = \"#FFFFFF\" ; // Color in hex value ctx . textAlign = \"start\" ; // Position of text starting const name = username > 7 ? username . substring ( 0 , 7 ). trim () + '...' : username ; // Shorten name if its long ctx . fillText ( ` ${ name } ` , 264 , 164 ); // Writing the username Discrim \u00b6 Writing Discriminator ( #0950 ) in the card 1 2 3 4 ctx . font = `36px ${ font } ` ; // Weight - Normal ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; // Reducing opacity using rgba ctx . textAlign = \"start\" ; if ( discrim ) ctx . fillText ( `# ${ discrim } ` , ctx . measureText ( name ). width + 10 + 316 , 164 ); // Writing discrim Level \u00b6 Writing the Level of the user in the card 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = '#FFFFFF' ; ctx . textAlign = \"end\" ; ctx . fillText ( level , 934 - 64 , 82 ); // const level = level of the user ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"LEVEL\" , 934 - 64 - ctx . measureText ( level ). width - 16 , 82 ); // Writing \"LEVEL\" Rank \u00b6 Writing the Rank ( #10 ) of the user in the card 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#ffffff\" ; ctx . textAlign = \"end\" ; ctx . fillText ( rank , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 , 82 ); // const rank = rank of the user ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"RANK\" , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 - ctx . measureText ( rank ). width - 16 , 82 ); // Writing \"RANK\" Writing Current and Needed EXP \u00b6 You must calculate proper value of current experience points and the maximum expirence point of the current level. This is also needed for progress bar in the card. 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.5)\" ; ctx . textAlign = \"start\" ; ctx . fillText ( \"/ \" + neededXP , 624 + ctx . measureText ( currentXP ). width + 10 , 164 ); ctx . fillStyle = \"#ffffff\" ; ctx . fillText ( currentXP , 624 , 164 ); Progress bar \u00b6 This is the most complex part of the entire rank card. This might be tricky but everything is possible. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ctx . beginPath (); ctx . fillStyle = \"#424751\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , 615 - 18.5 , 37.5 ); ctx . arc ( 257 + 615 , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); ctx . beginPath (); ctx . fillStyle = \"#ffffff\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , widthXP , 37.5 ); ctx . arc ( 257 + 18.5 + widthXP , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); Info If your bar exceeds the bar graph, add the below code before making the progress bar. 1 2 let widthXP = ( currentXP * 615 ) / neededXP ; if ( widthXP > 615 - 18.5 ) widthXP = 615 - 18.5 ; Avatar \u00b6 Finally drawing the avatar of the user 1 2 const avatar = await Canvas . loadImage ( avatarURLoftheUser ); ctx . drawImage ( avatar , 85 , 66 , 150 , 150 ); Info If you want a circle avatar you can clip the path before drawing the avatar! Getting the Buffer \u00b6 1 const card = canvas . toBuffer (); Full Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); const ctx = canvas . getContext ( \"2d\" ); const rankCard = await Canvas . loadImage ( \"https://zyrouge.gq/assets/images/others/discord-js-rank-card.png\" ); ctx . drawImage ( rankCard , 0 , 0 , canvas . width , canvas . height ); const font = \"Arial\" ; ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#FFFFFF\" ; ctx . textAlign = \"start\" ; const name = username > 7 ? username . substring ( 0 , 7 ). trim () + '...' : username ; ctx . fillText ( ` ${ name } ` , 264 , 164 ); ctx . font = `36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . textAlign = \"center\" ; if ( discrim ) ctx . fillText ( `# ${ discrim } ` , ctx . measureText ( name ). width + 10 + 316 , 164 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = '#FFFFFF' ; ctx . textAlign = \"end\" ; ctx . fillText ( level , 934 - 64 , 82 ); ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"LEVEL\" , 934 - 64 - ctx . measureText ( level ). width - 16 , 82 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#ffffff\" ; ctx . textAlign = \"end\" ; ctx . fillText ( rank , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 , 82 ); ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"RANK\" , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 - ctx . measureText ( rank ). width - 16 , 82 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.5)\" ; ctx . textAlign = \"start\" ; ctx . fillText ( \"/ \" + neededXP , 624 + ctx . measureText ( currentXP ). width + 10 , 164 ); ctx . fillStyle = \"#ffffff\" ; ctx . fillText ( currentXP , 624 , 164 ); let widthXP = ( currentXP * 615 ) / neededXP ; if ( widthXP > 615 - 18.5 ) widthXP = 615 - 18.5 ; ctx . beginPath (); ctx . fillStyle = \"#424751\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , 615 - 18.5 , 37.5 ); ctx . arc ( 257 + 615 , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); ctx . beginPath (); ctx . fillStyle = \"#ffffff\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , widthXP , 37.5 ); ctx . arc ( 257 + 18.5 + widthXP , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); const avatar = await Canvas . loadImage ( avatarURL ); ctx . drawImage ( avatar , 85 , 66 , 150 , 150 ); const card = canvas . toBuffer (); Other Examples \u00b6 Aurora 's rank card:","title":"Rank card using canvas"},{"location":"discordjs/rank-card-using-canvas/#preview","text":"Output: Warning The above using a different font Base:","title":"Preview"},{"location":"discordjs/rank-card-using-canvas/#alternative","text":"If you are a beginner, you can use canvacord to do this! 1 $ npm install canvacord Info Canvacord has the same code below!","title":"Alternative"},{"location":"discordjs/rank-card-using-canvas/#installing-canvas","text":"Open your command prompt (or) powershell and run the following command. 1 $ npm install canvas","title":"Installing Canvas"},{"location":"discordjs/rank-card-using-canvas/#creating-a-canvas","text":"Creating a new canvas to begin the rank card! 1 2 3 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); // Use this measurement if you are using the card in this tutorial const ctx = canvas . getContext ( \"2d\" );","title":"Creating a canvas"},{"location":"discordjs/rank-card-using-canvas/#rank-card-base","text":"You can use the base picture used in this tutorial or make your own one! 1 2 3 4 5 6 7 8 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); const ctx = canvas . getContext ( \"2d\" ); const rankCard = await Canvas . loadImage ( \"https://zyrouge.gq/assets/images/others/discord-js-rank-card.png\" ); ctx . drawImage ( rankCard , 0 , 0 , canvas . width , canvas . height ); const font = \"Arial\" ; // Default font","title":"Rank Card base"},{"location":"discordjs/rank-card-using-canvas/#username","text":"Now lets write the username on the card 1 2 3 4 5 ctx . font = `bold 36px ${ font } ` ; // Weight - Bold, Size - 36px ctx . fillStyle = \"#FFFFFF\" ; // Color in hex value ctx . textAlign = \"start\" ; // Position of text starting const name = username > 7 ? username . substring ( 0 , 7 ). trim () + '...' : username ; // Shorten name if its long ctx . fillText ( ` ${ name } ` , 264 , 164 ); // Writing the username","title":"Username"},{"location":"discordjs/rank-card-using-canvas/#discrim","text":"Writing Discriminator ( #0950 ) in the card 1 2 3 4 ctx . font = `36px ${ font } ` ; // Weight - Normal ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; // Reducing opacity using rgba ctx . textAlign = \"start\" ; if ( discrim ) ctx . fillText ( `# ${ discrim } ` , ctx . measureText ( name ). width + 10 + 316 , 164 ); // Writing discrim","title":"Discrim"},{"location":"discordjs/rank-card-using-canvas/#level","text":"Writing the Level of the user in the card 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = '#FFFFFF' ; ctx . textAlign = \"end\" ; ctx . fillText ( level , 934 - 64 , 82 ); // const level = level of the user ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"LEVEL\" , 934 - 64 - ctx . measureText ( level ). width - 16 , 82 ); // Writing \"LEVEL\"","title":"Level"},{"location":"discordjs/rank-card-using-canvas/#rank","text":"Writing the Rank ( #10 ) of the user in the card 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#ffffff\" ; ctx . textAlign = \"end\" ; ctx . fillText ( rank , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 , 82 ); // const rank = rank of the user ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"RANK\" , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 - ctx . measureText ( rank ). width - 16 , 82 ); // Writing \"RANK\"","title":"Rank"},{"location":"discordjs/rank-card-using-canvas/#writing-current-and-needed-exp","text":"You must calculate proper value of current experience points and the maximum expirence point of the current level. This is also needed for progress bar in the card. 1 2 3 4 5 6 ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.5)\" ; ctx . textAlign = \"start\" ; ctx . fillText ( \"/ \" + neededXP , 624 + ctx . measureText ( currentXP ). width + 10 , 164 ); ctx . fillStyle = \"#ffffff\" ; ctx . fillText ( currentXP , 624 , 164 );","title":"Writing Current and Needed EXP"},{"location":"discordjs/rank-card-using-canvas/#progress-bar","text":"This is the most complex part of the entire rank card. This might be tricky but everything is possible. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ctx . beginPath (); ctx . fillStyle = \"#424751\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , 615 - 18.5 , 37.5 ); ctx . arc ( 257 + 615 , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); ctx . beginPath (); ctx . fillStyle = \"#ffffff\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , widthXP , 37.5 ); ctx . arc ( 257 + 18.5 + widthXP , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); Info If your bar exceeds the bar graph, add the below code before making the progress bar. 1 2 let widthXP = ( currentXP * 615 ) / neededXP ; if ( widthXP > 615 - 18.5 ) widthXP = 615 - 18.5 ;","title":"Progress bar"},{"location":"discordjs/rank-card-using-canvas/#avatar","text":"Finally drawing the avatar of the user 1 2 const avatar = await Canvas . loadImage ( avatarURLoftheUser ); ctx . drawImage ( avatar , 85 , 66 , 150 , 150 ); Info If you want a circle avatar you can clip the path before drawing the avatar!","title":"Avatar"},{"location":"discordjs/rank-card-using-canvas/#getting-the-buffer","text":"1 const card = canvas . toBuffer ();","title":"Getting the Buffer"},{"location":"discordjs/rank-card-using-canvas/#full-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 const Canvas = require ( \"canvas\" ); const canvas = Canvas . createCanvas ( 934 , 282 ); const ctx = canvas . getContext ( \"2d\" ); const rankCard = await Canvas . loadImage ( \"https://zyrouge.gq/assets/images/others/discord-js-rank-card.png\" ); ctx . drawImage ( rankCard , 0 , 0 , canvas . width , canvas . height ); const font = \"Arial\" ; ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#FFFFFF\" ; ctx . textAlign = \"start\" ; const name = username > 7 ? username . substring ( 0 , 7 ). trim () + '...' : username ; ctx . fillText ( ` ${ name } ` , 264 , 164 ); ctx . font = `36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . textAlign = \"center\" ; if ( discrim ) ctx . fillText ( `# ${ discrim } ` , ctx . measureText ( name ). width + 10 + 316 , 164 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = '#FFFFFF' ; ctx . textAlign = \"end\" ; ctx . fillText ( level , 934 - 64 , 82 ); ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"LEVEL\" , 934 - 64 - ctx . measureText ( level ). width - 16 , 82 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"#ffffff\" ; ctx . textAlign = \"end\" ; ctx . fillText ( rank , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 , 82 ); ctx . fillStyle = \"rgba(255, 255, 255, 0.4)\" ; ctx . fillText ( \"RANK\" , 934 - 64 - ctx . measureText ( level ). width - 16 - ctx . measureText ( `LEVEL` ). width - 16 - ctx . measureText ( rank ). width - 16 , 82 ); ctx . font = `bold 36px ${ font } ` ; ctx . fillStyle = \"rgba(255, 255, 255, 0.5)\" ; ctx . textAlign = \"start\" ; ctx . fillText ( \"/ \" + neededXP , 624 + ctx . measureText ( currentXP ). width + 10 , 164 ); ctx . fillStyle = \"#ffffff\" ; ctx . fillText ( currentXP , 624 , 164 ); let widthXP = ( currentXP * 615 ) / neededXP ; if ( widthXP > 615 - 18.5 ) widthXP = 615 - 18.5 ; ctx . beginPath (); ctx . fillStyle = \"#424751\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , 615 - 18.5 , 37.5 ); ctx . arc ( 257 + 615 , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); ctx . beginPath (); ctx . fillStyle = \"#ffffff\" ; ctx . arc ( 257 + 18.5 , 147.5 + 18.5 + 36.25 , 18.5 , 1.5 * Math . PI , 0.5 * Math . PI , true ); ctx . fill (); ctx . fillRect ( 257 + 18.5 , 147.5 + 36.25 , widthXP , 37.5 ); ctx . arc ( 257 + 18.5 + widthXP , 147.5 + 18.5 + 36.25 , 18.75 , 1.5 * Math . PI , 0.5 * Math . PI , false ); ctx . fill (); const avatar = await Canvas . loadImage ( avatarURL ); ctx . drawImage ( avatar , 85 , 66 , 150 , 150 ); const card = canvas . toBuffer ();","title":"Full Code"},{"location":"discordjs/rank-card-using-canvas/#other-examples","text":"Aurora 's rank card:","title":"Other Examples"},{"location":"expressjs/basics/","text":"Info Check this YouTube Video to see this in real action! Installing \u00b6 1 npm i express Creating a Server \u00b6 1 2 const express = require ( \"express\" ); const app = express (); // Our Server Binding server to a Port \u00b6 1 2 3 4 const express = require ( \"express\" ); const app = express (); app . listen ( 8080 ); The Basic Middlewares \u00b6 To parse json body 1 app . use ( express . json ()); To parse urlencoded body 1 app . use ( express . urlencoded ({ extended : true })); Creating an endpoint \u00b6 Making http://localhost:8080/ to return something 1 2 3 app . get ( \"/\" , ( req , res ) => { res . send ( \"Hello world!\" ); }); Now when we visit http://localhost:8080/ , we get Hello world! ! Sending JSON \u00b6 1 2 3 app . get ( \"/\" , ( req , res ) => { res . json ({ hello : \"world\" }); }); Creating a POST endpoint \u00b6 1 2 3 app . post ( \"/\" , ( req , res ) => { res . json ( req . body ); }); req.body is available on all the POST requests! It can be a json , xml or someother thing. Tip Use Insomnia or Postman to test any type of Requests! URL Parameters \u00b6 Any word with : prefix is treated as an Parameter and can be access by req.params[param_name] . 1 2 3 4 5 app . get ( \"/users/:user\" , ( req , res ) => { const name = req . params . user ; if ( ! name ) return res . send ( \"No User\" ); res . json ({ name }); }); URL Queries \u00b6 They can be accessed using req.query[query_name] . 1 2 3 4 5 app . get ( \"/search\" , ( req , res ) => { const term = req . params . term ; if ( ! term ) return res . send ( \"No Search term\" ); res . send ( `Search term is ${ term } ` ); });","title":"The Basics"},{"location":"expressjs/basics/#installing","text":"1 npm i express","title":"Installing"},{"location":"expressjs/basics/#creating-a-server","text":"1 2 const express = require ( \"express\" ); const app = express (); // Our Server","title":"Creating a Server"},{"location":"expressjs/basics/#binding-server-to-a-port","text":"1 2 3 4 const express = require ( \"express\" ); const app = express (); app . listen ( 8080 );","title":"Binding server to a Port"},{"location":"expressjs/basics/#the-basic-middlewares","text":"To parse json body 1 app . use ( express . json ()); To parse urlencoded body 1 app . use ( express . urlencoded ({ extended : true }));","title":"The Basic Middlewares"},{"location":"expressjs/basics/#creating-an-endpoint","text":"Making http://localhost:8080/ to return something 1 2 3 app . get ( \"/\" , ( req , res ) => { res . send ( \"Hello world!\" ); }); Now when we visit http://localhost:8080/ , we get Hello world! !","title":"Creating an endpoint"},{"location":"expressjs/basics/#sending-json","text":"1 2 3 app . get ( \"/\" , ( req , res ) => { res . json ({ hello : \"world\" }); });","title":"Sending JSON"},{"location":"expressjs/basics/#creating-a-post-endpoint","text":"1 2 3 app . post ( \"/\" , ( req , res ) => { res . json ( req . body ); }); req.body is available on all the POST requests! It can be a json , xml or someother thing. Tip Use Insomnia or Postman to test any type of Requests!","title":"Creating a POST endpoint"},{"location":"expressjs/basics/#url-parameters","text":"Any word with : prefix is treated as an Parameter and can be access by req.params[param_name] . 1 2 3 4 5 app . get ( \"/users/:user\" , ( req , res ) => { const name = req . params . user ; if ( ! name ) return res . send ( \"No User\" ); res . json ({ name }); });","title":"URL Parameters"},{"location":"expressjs/basics/#url-queries","text":"They can be accessed using req.query[query_name] . 1 2 3 4 5 app . get ( \"/search\" , ( req , res ) => { const term = req . params . term ; if ( ! term ) return res . send ( \"No Search term\" ); res . send ( `Search term is ${ term } ` ); });","title":"URL Queries"},{"location":"nodejs/getting-started-with-nodejs/","text":"Installing NodeJS \u00b6 Download and install from NodeJS Website Creating a Project \u00b6 1 npm init Installing Modules \u00b6 1 npm install module-name Installing Globally \u00b6 1 npm install -g module-name","title":"Getting Started with NodeJS"},{"location":"nodejs/getting-started-with-nodejs/#installing-nodejs","text":"Download and install from NodeJS Website","title":"Installing NodeJS"},{"location":"nodejs/getting-started-with-nodejs/#creating-a-project","text":"1 npm init","title":"Creating a Project"},{"location":"nodejs/getting-started-with-nodejs/#installing-modules","text":"1 npm install module-name","title":"Installing Modules"},{"location":"nodejs/getting-started-with-nodejs/#installing-globally","text":"1 npm install -g module-name","title":"Installing Globally"},{"location":"sequelize/creating-keys-in-models/","text":"Creating a Key \u00b6 The Async/Await method 1 2 const result = await database . create ({ key : \"test\" , value : 1 }); console . log ( result ); The .then() method 1 2 3 4 database . create ({ key : \"test\" , value : 1 }) . then (( result ) => console . log ( result )) . catch ( console . error );","title":"Creating a Key"},{"location":"sequelize/creating-keys-in-models/#creating-a-key","text":"The Async/Await method 1 2 const result = await database . create ({ key : \"test\" , value : 1 }); console . log ( result ); The .then() method 1 2 3 4 database . create ({ key : \"test\" , value : 1 }) . then (( result ) => console . log ( result )) . catch ( console . error );","title":"Creating a Key"},{"location":"sequelize/creating-models/","text":"Defining a Model \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 const Sequelize = require ( \"sequelize\" ); const sequelize = new Sequelize ( 'database' , 'user' , 'password' , { host : 'localhost' , dialect : 'sqlite' , // using sqlite3 here (must install sqlite3 to use it) logging : false , storage : 'database.sqlite' }); const database = sequelize . define ( 'nameOfTheTable' , { key : Sequelize . STRING , // more datatypes can be found at Sequelize Docs value : Sequelize . NUMBER }); Syncing the Models \u00b6 The Async/Await Method 1 2 await database . sync (); console . log ( 'Database Loaded!' ) The .then method 1 2 3 database . sync () . then (() => console . log ( 'Database Loaded!' ));","title":"Creating Models"},{"location":"sequelize/creating-models/#defining-a-model","text":"1 2 3 4 5 6 7 8 9 10 11 12 const Sequelize = require ( \"sequelize\" ); const sequelize = new Sequelize ( 'database' , 'user' , 'password' , { host : 'localhost' , dialect : 'sqlite' , // using sqlite3 here (must install sqlite3 to use it) logging : false , storage : 'database.sqlite' }); const database = sequelize . define ( 'nameOfTheTable' , { key : Sequelize . STRING , // more datatypes can be found at Sequelize Docs value : Sequelize . NUMBER });","title":"Defining a Model"},{"location":"sequelize/creating-models/#syncing-the-models","text":"The Async/Await Method 1 2 await database . sync (); console . log ( 'Database Loaded!' ) The .then method 1 2 3 database . sync () . then (() => console . log ( 'Database Loaded!' ));","title":"Syncing the Models"},{"location":"sequelize/deleting-keys-in-models/","text":"Deleting a Key \u00b6 The Async/Await method 1 2 const result = await database . destroy ({ where : { key : \"test\" } }); console . log ( result ); The .then() method 1 2 3 4 database . destroy ({ where : { key : \"test\" } }) . then ( result => console . log ( result )) . catch ( console . error );","title":"Deleting a Key"},{"location":"sequelize/deleting-keys-in-models/#deleting-a-key","text":"The Async/Await method 1 2 const result = await database . destroy ({ where : { key : \"test\" } }); console . log ( result ); The .then() method 1 2 3 4 database . destroy ({ where : { key : \"test\" } }) . then ( result => console . log ( result )) . catch ( console . error );","title":"Deleting a Key"},{"location":"sequelize/finding-all-keys-in-model/","text":"Finding All \u00b6 The Async/Await method 1 2 const result = await database . findAll (); console . log ( result ); The .then() method 1 2 3 database . findAll () . then ( result => console . log ( result )) . catch ( console . error );","title":"Finding all the Keys"},{"location":"sequelize/finding-all-keys-in-model/#finding-all","text":"The Async/Await method 1 2 const result = await database . findAll (); console . log ( result ); The .then() method 1 2 3 database . findAll () . then ( result => console . log ( result )) . catch ( console . error );","title":"Finding All"},{"location":"sequelize/finding-keys-in-models/","text":"Finding only One \u00b6 The Async/Await method 1 2 const result = await database . findOne ({ where : { key : \"test\" } }); console . log ( result ); The .then method 1 2 3 4 database . findOne ({ key : \"test\" }) . then (( result ) => console . log ( result )) . catch ( console . error ); Info Many Parameters can be specified in where options.","title":"Finding a Key"},{"location":"sequelize/finding-keys-in-models/#finding-only-one","text":"The Async/Await method 1 2 const result = await database . findOne ({ where : { key : \"test\" } }); console . log ( result ); The .then method 1 2 3 4 database . findOne ({ key : \"test\" }) . then (( result ) => console . log ( result )) . catch ( console . error ); Info Many Parameters can be specified in where options.","title":"Finding only One"},{"location":"sequelize/getting-started-with-sequelize/","text":"Installing Sequelize \u00b6 1 npm install sequelize Official Documentation \u00b6 Sequelize v5 Sequelize v4 Sequelize v3","title":"Getting started with Sequelize"},{"location":"sequelize/getting-started-with-sequelize/#installing-sequelize","text":"1 npm install sequelize","title":"Installing Sequelize"},{"location":"sequelize/getting-started-with-sequelize/#official-documentation","text":"Sequelize v5 Sequelize v4 Sequelize v3","title":"Official Documentation"},{"location":"sequelize/updating-keys-in-models/","text":"Updating a Key \u00b6 The Async/Await method 1 2 const result = await database . update ({ value : 2 }, { where : { key : \"test\" } }); console . log ( result ); The .then method 1 2 3 4 database . update ({ value : 2 }, { where : { key : \"test\" } }) . then ( result => console . log ( result )) . catch ( console . error );","title":"Updating a Key"},{"location":"sequelize/updating-keys-in-models/#updating-a-key","text":"The Async/Await method 1 2 const result = await database . update ({ value : 2 }, { where : { key : \"test\" } }); console . log ( result ); The .then method 1 2 3 4 database . update ({ value : 2 }, { where : { key : \"test\" } }) . then ( result => console . log ( result )) . catch ( console . error );","title":"Updating a Key"}]}